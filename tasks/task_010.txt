# Task ID: 10
# Title: Implement MCP Server Data Management
# Status: done
# Dependencies: 3
# Priority: medium
# Description: Create a simple function to load MCP server data from multiple JSON files (servers.json, config.json, credinfo.json), generate embeddings, and upsert to the database.
# Details:
1. Implement JSON parsing for multiple MCP configuration files (servers.json, config.json, credinfo.json)
2. Use OpenAI API to generate embeddings
3. Create database upsert logic
4. Make function work as both standalone script and importable module

Code snippet:
```python
import json
import httpx
import os
import asyncio

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

async def generate_embedding(text):
    async with httpx.AsyncClient() as client:
        response = await client.post(
            "https://api.openai.com/v1/embeddings",
            headers={"Authorization": f"Bearer {OPENAI_API_KEY}"},
            json={"input": text, "model": "text-embedding-ada-002"}
        )
        return response.json()["data"][0]["embedding"]

async def load_mcp_data():
    # Load data from multiple files
    with open('servers.json', 'r') as f:
        servers_data = json.load(f)
    
    with open('config.json', 'r') as f:
        config_data = json.load(f)
        
    with open('credinfo.json', 'r') as f:
        cred_data = json.load(f)
    
    # Process and combine data
    for server in servers_data:
        # Enrich server data with config and credential info as needed
        server_config = next((c for c in config_data if c.get('server_id') == server.get('id')), {})
        server_creds = next((c for c in cred_data if c.get('server_id') == server.get('id')), {})
        
        # Generate embedding for server description
        embedding = await generate_embedding(server['description'])
        
        # Upsert to Supabase
        supabase.table("mcp_servers").upsert({
            'name': server['name'],
            'type': server['type'],
            'description': server['description'],
            'endpoint': server.get('endpoint', ''),
            'credential_requirements': server_creds.get('requirements', []),
            'config': server_config,
            'embedding': embedding
        }).execute()
    
    print(f"Loaded {len(servers_data)} MCP servers")

# Allow running as standalone script
if __name__ == "__main__":
    asyncio.run(load_mcp_data())
```

# Test Strategy:
1. Test JSON parsing with sample server configurations from all three files
2. Verify embedding generation and storage
3. Test database upsert functionality
4. Verify script can be run standalone and as an imported module

# Subtasks:
## 1. Load JSON files [done]
### Dependencies: None
### Description: Read servers.json, config.json, and credinfo.json
### Details:
Load three JSON files:
with open('servers.json', 'r') as f:
    servers_data = json.load(f)
with open('config.json', 'r') as f:
    config_data = json.load(f)
with open('credinfo.json', 'r') as f:
    cred_data = json.load(f)

## 2. Generate embeddings [done]
### Dependencies: 10.1
### Description: Create embeddings for each server using OpenAI
### Details:
For each server, generate embedding:
embedding = openai_client.embeddings.create(
    model="text-embedding-3-small",
    input=f"{server['name']} {server['description']}"
)

## 3. Combine server data [done]
### Dependencies: 10.1
### Description: Merge data from all three JSON files for each server
### Details:
Match servers with their config and credential info by name/id, combine into single record per server

## 4. Upsert to database [done]
### Dependencies: 10.2, 10.3
### Description: Insert or update server data in mcp_servers table
### Details:
Upsert each server:
supabase.table("mcp_servers").upsert({
    'name': server['name'],
    'description': server['description'],
    'tools': server['tools'],
    'config_template': config,
    'credential_info': cred_info,
    'embedding': embedding
}).execute()

